docker build
docker run -d -it --name=flask wsgi-nginx-flask:python3.6 sh
standard_init_linux.go:211: exec user process caused "exec format error"
touch entrypoint.sh
touch start.sh

ก็ยังไม่ได้อะไรขึ้นมา
เจอไอ้นี่เข้าไปจบเลย
docker run -d -it --name=flaskian tiangolo/uwsgi-nginx sh
ไอ้นี่ ไม่มี flask เฉ๊ย สาสสส

docker build -t wsgi-nginx-flask:python3.6 .

docker build -t python-flask .

docker run -d -it --name=flaskbox -p 5001:5000 python-flask

ต้องทำเป็น volume มาเม้าท์
docker volume create mysql-data
pimpwhippa@pimpwhippa-Aspire-E5-473G:~/data-test/mysql$ docker volume ls
local               mysql-data
pimpwhippa@pimpwhippa-Aspire-E5-473G:~/data-test/mysql$ docker volume inspect mysql-data
[
    {
        "CreatedAt": "2020-09-07T00:13:31+03:00",
        "Driver": "local",
        "Labels": {},
        "Mountpoint": "/var/lib/docker/volumes/mysql-data/_data",
        "Name": "mysql-data",
        "Options": {},
        "Scope": "local"
    }


#แต่นี่อยู่ใน docker-compose นะ
docker run -d \
  --name flaskmysql \
  -v mysql-data:var/lib/mysql \
  mysql/mysql-server:latest


191020
กลับมาโปรเจ็คนี้หลังจากที่ย้อนกลับไป GroupTimeSeriesSplit มาเดือนกว่าแต่ learning curve สูงมาก
คือการเขียนลูปในลูป และการจัดการแพคเกจเพื่อดิสทริบิวท์

กลับมาแล้วยังต่อไม่ค่อยติด
ในที่สุดก็ไล่มาจนเจอ docker-compose แล้วจ้า ไหนดูซิจะสั่งยังไง
ใช้เวลาเป็นชั่วโมงกว่าจะคลำทางกลับมาเจอไฟล์ใน flask script นี่ แต่ชื่อก็ถูกอยู่

volumes:
- mysql-data:/var/lib/mysql
มันอยู่ที่ไหนนะ ลบไปแล้วไม่ใช่เหรอ ตอนนี้โฟลเดอร์ชื่อ data-test อยู่ฝั่ง linux นี่นา
สั่ง docker-compose up แล้วเปิด localhost:5000/ ได้

201020
เริ่มเขียน Mysql query ทันทีหลังจากที่ต่อ flask จากในคอนเทนเนอร์ได้และสั่ง docker-compose up โดยมี dbเสร็จเรียบร้อย
แต่ลืมไปว่า db อันนั้นไม่ใช่อันที่โหลดดาต้าไว้แล้ว
เลยต้องมาดูใหม่ว่าจะโหลดดาต้าลงไปใน Mysql ที่สั่งรันด้วย docker-compose ยังไง
ก็จะไปเรียกไฟล์ดูเล่นๆ แต่ปรากฏว่าไม่มี nano และไม่มี apt-get ด้วย ถ้าจะให้มีต้องไปเขียนใน Dockerfile ใหม่ว่า
RUN apt-get update

สรุปต้องใช้ Dockerfile อยู่ดี จะเขียนแค่ docker-compose ไม่พอ

วิธีต่อดาต้าเบสเข้ากับ flask ใน docker

1. คือจะdocker-compose ให้ขึ้นมาก่อน แล้วไปโหลดดาต้าใส่ที่หลัง ก็ต้องหาทางเช็คสถานะว่าโหลดเรียบร้อยไหม พร้อมให้ query ไหม แต่ว่าด้วยวิธี docker-composeนี้ จะ exec เข้าไปใน flask_mysql_1ไม่ได้ เพราะติด 
ERROR 1130 (HY000): Host '127.0.0.1' is not allowed to connect to this MySQL server

pimpwhippa@pimpwhippa-Aspire-E5-473G:~/Works/recommender/flask$ docker exec -it flask_mysql_1 mysql -uroot -pdatabase
แต่ไม่ควรใส่ password (database) ลงไปใน cli มันอันตราย จริงๆใส่แค่ -p ก็พอแล้วมันจะพร้อมท์ให้ใส่พาสเวิร์ดเอง

จะแก้ error 1130 ต้องไปแก้ในไฟล์ my.ini ประมาณว่าเป็น cnf config file ของ mysql แต่ยังไม่รู้จะแก้ยังไง

2. คือสร้าง mysql container มาด้วย Dockerfile แล้วค่อยเอามาต่อกัน ด้วย –link หรืออะไรแบบนั้น หรือจะเอามาใส่ compose ทีหลังก็ได้เหมือนกัน ซึ่งตอนนี้มี container นั้นอยู่แล้ว ก็อาจจะต้องลองวิธีนี้


มันต้อง compose ได้สิวะ

ลองสร้าง mysql container ขึ้นมาใหม่ dump data เข้าไป ก็เปิดได้ปกติ
ลองรันด้วย compose dump data ได้ แต่ exec ไม่ได้อยู่ดี
แสดงว่าอยู่ที่ permission ของ compose
ต้อง grant user สำหรับ mysql container ให้ได้ก่อนที่จะรัน
อาจจะอยู่ใน command:
docker-compose up -d
# Give some time for mysql to get up
sleep 20
docker-compose exec mysql mysql -uroot -proot test <dummy1.sql

mysql:
   image: mysql:latest
    environment:
     - MYSQL_ROOT_PASSWORD=root
     - MYSQL_DATABASE=test

     ports:
      - "3306:3306"
   mysqlinit:
     image: mysql:latest
     volumes:
       - ./dummy1.sql:/dump/dummy1.sql
     command: bash -c "sleep 20 && mysql -h mysql -uroot -proot test < /dump/dummy1.sql"
mysql -h localhost -P 3306 --protocol=tcp -uroot -p

mysql> CREATE USER 'pimp'@'%' IDENTIFIED BY 'some_pass';
mysql> GRANT ALL PRIVILEGES ON *.* TO 'pimp'@'%'
    ->     WITH GRANT OPTION;
FLUSH PRIVILEGES;


ippa@pimpwhippa-Aspire-E5-473G:~/Works/recommender/flask$ docker exec -it mysqlready mysql -uroot -p
Enter password: 
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 8
Server version: 8.0.21 MySQL Community Server - GPL

Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql> CREATE USER 'pimp'@'%' IDENTIFIED BY 'some_pass';
Query OK, 0 rows affected (0.06 sec)

mysql> GRANT ALL PRIVILEGES ON *.* TO 'pimp'@'%'
    -> WITH GRANT OPTION;
Query OK, 0 rows affected (0.00 sec)

mysql> FLUSH PRIVILEGES;
Query OK, 0 rows affected (0.02 sec)

mysql> exit
Bye
pimpwhippa@pimpwhippa-Aspire-E5-473G:~/Works/recommender/flask$ docker stop mysqlready
mysqlready
pimpwhippa@pimpwhippa-Aspire-E5-473G:~/Works/recommender/flask$ docker-compose up
WARNING: Found orphan containers (flask_flask_app_1, flask_mysql_1) for this project. If you removed or renamed this service in your compose file, you can run this command with the --remove-orphans flag to clean it up.
Recreating flask_db_1 ... done
Recreating flask_flask_1 ... done
Attaching to flask_db_1, flask_flask_1
db_1     | [Entrypoint] MySQL Docker Image 8.0.21-1.1.17
db_1     | 2020-10-23T21:26:05.510853Z 0 [ERROR] [MY-000068] [Server] unknown option '--remove-orphans'.
db_1     | 2020-10-23T21:26:05.510992Z 0 [ERROR] [MY-010119] [Server] Aborting
db_1     | [Entrypoint] ERROR: Unable to start MySQL. Please check your configuration.
db_1     | [Entrypoint] 
flask_db_1 exited with code 1
flask_1  |  * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)
flask_1  |  * Restarting with stat
flask_1  |  * Debugger is active!
flask_1  |  * Debugger PIN: 151-401-641
^CGracefully stopping... (press Ctrl+C again to force)
Stopping flask_flask_1   ... done
pimpwhippa@pimpwhippa-Aspire-E5-473G:~/Works/recommender/flask$ docker-compose up --remove-orphan
Removing orphan container "flask_flask_app_1"
Removing orphan container "flask_mysql_1"
Recreating flask_db_1 ... done
Recreating flask_flask_1 ... done
Attaching to flask_db_1, flask_flask_1
db_1     | [Entrypoint] MySQL Docker Image 8.0.21-1.1.17
db_1     | [Entrypoint] Starting MySQL 8.0.21-1.1.17
db_1     | 2020-10-23T21:30:51.644523Z 0 [System] [MY-010116] [Server] /usr/sbin/mysqld (mysqld 8.0.21) starting as process 22
db_1     | 2020-10-23T21:30:51.973406Z 1 [System] [MY-013576] [InnoDB] InnoDB initialization has started.
db_1     | 2020-10-23T21:30:53.315313Z 1 [System] [MY-013577] [InnoDB] InnoDB initialization has ended.
db_1     | 2020-10-23T21:30:53.806201Z 0 [System] [MY-011323] [Server] X Plugin ready for connections. Bind-address: '::' port: 33060, socket: /var/run/mysqld/mysqlx.sock
db_1     | 2020-10-23T21:30:53.871036Z 0 [System] [MY-010229] [Server] Starting XA crash recovery…



need to put password in secret, not on cli
touch uwsgi.ini
to do touch-reload don’t have to delete and rebuild containers

docker exec -it flask_mysql_1 mysql -uroot -pdatabase -D Netflix -e "SELECT * FROM shows3;


โอ้ย 
คือตอ้งไล่เช็คไปทุกบรรทัดเลย
1.ดูว่าโหลด netflix_dump3.sql ถูกหรือเปล่า
2.ทำไม exec ไม่ได้ ทำไม 127.0.0.1 is not allowed
3.ใช้ SQL connector ถูกหรืเปล่า
pymysql
MySQLdb flask-mysqldb only supports python2.7
สุดท้ายอาจต้องไปลอองใช้ sqlalchemy
flask-mysql
ไม่รู้อันไหนเป็นอันไหน
4.และสุดท้าย อยากรู้ว่า render template ได้ถูกต้องไหม
ต้องไล่เช็คไปทีละอย่างเหรอเนี่ย

docker exec -it flask_mysql_1 bash -c "export TERM=xterm; exec bash"

in mysqlready where I did
cat ../../../mysql-dump/dump_netflix.sql | docker exec -i mysqlready /usr/bin/mysql -uroot –password=database

the data persisted

but when I tried to go see what’s inside
bash-4.2# cd docker-entrypoint-initdb.d/
there’s no file call init.sql

but if in docker-compose I tried the same, there’s the file
but I cannot nano it. So I cannot see what’s inside
maybe there’s no database in there at all??

in bind mount mysql-dump, there’re 2 files dump_netflix.sql and dump_netflix3.sql, but I don’t know if any of these got into the container for real
the container is ready for connections (according to docker-compose up) but I don’t know what’s in there. How can I check?

Cannot exec 127.0.0.1 is not allowed
cannot nano to see inside

now can exec!
MYSQL_HOST: 127.0.0.1 #<-- change to localhost and then i can exec after docker-compose
https://stackoverflow.com/questions/55165660/host-is-not-allowed-to-connect-to-this-mysql-server-from-vm
ติดมาตั้งหลายวัน!
271020

pimpwhippa@pimpwhippa-Aspire-E5-473G:~/Works/recommender/flask$ 
docker exec -it recommender_mysql_1 mysql -uroot -p

version: "3.8"
services:

mysql:
image: mysql/mysql-server:latest
command: --default-authentication-plugin=mysql_native_password
ports:
- "3306:3306"
volumes:
- data-test:/var/lib/mysql
- mysql-dump:/docker-entrypoint-initdb.d/init.sql
environment:
MYSQL_ROOT_PASSWORD: database
MYSQL_DATABASE: Netflix
MYSQL_HOST: 127.0.0.1 #<-- change to localhost and then i can exec after docker-compose up

ในcontainer ไม่มีดาต้าจริงๆด้วย เจอตั้งแต่ข้อแรกเลย
mysql> USE Netflix
Database changed
mysql> show tables;
Empty set (0.04 sec)


docker-compose rm
ต้องใช้ docker-compose.yml ด้วยว่ะ


For restoring data. You can use docker exec command with -i flag, similar to the following:

$ docker exec -i some-mysql sh -c 'exec mysql -uroot -p"$MYSQL_ROOT_PASSWORD"' < /some/path/on/your/host/all-databases.sql

#use this to check if dumping works
docker exec -i flask_mysql_1 sh -c 'exec mysql -uroot -p"database"' < /mysql-dump/dump_netflix3.sql

สุดท้ายที่ dump.sql ใส่ลงไปในคอนเทนเนอร์ไม่ได้เพราะว่า ใส่ path ตอน create volume เอามาbind ผิดอีกแล้วครับทั่น

และต้อง docker-compose stop, docker-compose rm, docker volume ls, docker volume prune, ออกให้เกลี้ยงก่อน ไม่งั้นมันไม่ initialize database ใหม่ ที่แก้ไปใน docker-compose.yml ก็ไม่เกิดผลอะไร

แต่ก็ยังไม่ display ด้วย flask_flask_app_1 ไม่ได้อยู่ดี มีปัญหากับ volume นี่แหละ
ตอนนี้ exec เข้าไปดู shows3 ได้แล้ว คือ dump_netflix3.sql ใส่ไปใน คอนเทนเนอร์ได้แล้ว
ด้วยการเปลี่ยน 127.0.0.1 เป็น localhost ใน docker-compose นั่นแหละ

ไปเช็คก่อนไหมว่า ที่สั่ง render template มัน

docker-compose mysql server who is allowed to connect

why docker-entrypoiont initdb doesn't initiate sql dump

import dump.sql does the table comes in automatically docker

connect flask container to mysql container

docker compose

ERROR 1130 (HY000): Host '127.0.0.1' is not allowed to connect to this MySQL server
load data into mysql started with docker-compose

In mathematics (in particular, functional analysis), convolution is a mathematical operation on two functions (f and g) that produces a third function ( ) that expresses how the shape of one is modified by the other. The term convolution refers to both the result function and to the process of computing it.

docker-compose how to check if mysql-dump is succesful

ก็ต้อง exec เข้าไปเรียกคำสั่ง mysql ดูให้เห็น show tables;
ตอนนี้เรียกได้แล้ว ก็มาไล่ดูว่า app.py มันทำงานได้หรือเปล่า จะเอา flask มาต่อกับ mysql ที่ load data แล้ว ยังไง
ก็ต้องเอามาต่อกัน จะใช้ flask-mysqldb, MySQL-python, PyMySQL, หรือ SQLAlchemy ตอนนี้เดินทางมาถึง PyMySQL แล้ว ยังต่อไม่ได้
ต้องสั่ง cur = pymysql.connect(host, password, database_name, port, etc.)
นึกว่าต้องรอให้ mysql ready for connection ก่อน แต่ลองแล้วโดยการให้ flask_app_1 restart on-failure ก็ยังเจอ ConnectionRefusedError อยู่ดี

ต้องไปดูเรื่อง socket อะไรอีกเนี่ย

ต้องไป docker image prune อะไรประมาณนี้ ตอนนี้มันเยอะไปหมด
เป้าหมายคือ

render mysql query ผ่านflask

push ไปที่ my github repo แล้ว
จริงๆควร update cv ได้เลยจะได้สมัครงานด้วย project นี้เลย


flask_app_1  |     db = pymysql.connect(db='mysql', user='root', passwd='database', unix_socket = "var/lib/mysql/mysql.sock")

flask_app_1  | pymysql.err.OperationalError: (2003, "Can't connect to MySQL server on 'localhost' ([Errno 2] No such file or directory)")
mysql_1      | 2020-11-01T20:43:30.854620Z 0 [System] [MY-011323] [Server] X Plugin ready for connections. Bind-address: '::' port: 33060, socket: /var/run/mysqld/mysqlx.sock

mysql_1      | 2020-11-01T20:43:31.168520Z 0 [System] [MY-010931] [Server] /usr/sbin/mysqld: ready for connections. Version: '8.0.21'  socket: '/var/lib/mysql/mysql.sock'  port: 3306  MySQL Community Server – GPL.

pimpwhippa@pimpwhippa-Aspire-E5-473G:~/Works/recommender/flask$ docker inspect flask_mysql_1 | grep Gateway
            "Gateway": "",
            "IPv6Gateway": "",
                    "Gateway": "172.25.0.1",

what do they mean?

localhost
127.0.0.1

socket = port+IP address
TCP/IP

IP
port
bind address
host

TCP
UDP


what I can try today
021120

in docker-compose
HOST: 172.25.0.1:3306 or 33060?

or
version: '3'
services:
  web-app:
    build:
      context: .
      dockerfile: web-app/Dockerfile
    ports:
       - 8080:8080
    network_mode: "host"
network_mode: “host”

That IP address will change whenever the container gets recreated; I'd recommend never looking up or using the container-internal IP addresses. The host name approach is much more reliable. – David Maze Feb 27 '19 at 11:07 
    • That right, host name by container name is the right way. And thay how docker-compose use – Truong Dang Feb 27 '19 at 13:54 

By default Compose sets up a single network for your app. Each container for a service joins the default network and 
is both reachable by other containers on that network, 
and discoverable by them at a hostname identical to the container name. flask_mysql_1


Each container can now look up 
the hostname web or db .  mysql
and get back the appropriate container’s IP address. 
For example, web’s application code could connect to the URL postgres://db:5432 mysql://mysql:3306 and start using the Postgres database.

version: "3.8"
services:
  web:
    build: .
    ports:
      - "8000:8000"
  db:
    image: postgres
    ports:
      - "8001:5432"

It is important to note the distinction between HOST_PORT and CONTAINER_PORT. 
In the above example, for db, the HOST_PORT is 8001 
and the  CONTAINER_PORT is 5432 (postgres default). 
Networked service-to-service communication uses the CONTAINER_PORT. 3306
When HOST_PORT is defined, the service is accessible outside the swarm as well.



Links allow you to define extra aliases by which a service is reachable from another service. 
They are not required to enable services to communicate - by default, 
any service can reach any other service at that service’s name. mysql
In the following example, db is reachable from web at the hostnames db and database:

version: "3"
services:

  web:
    build: .
    links:
      - "db:database"
  db:
    image: postgres
เอา database มาจากไหนวะ

docker network ls
NETWORK ID          NAME                  DRIVER              SCOPE
13ed315269fd        bridge                bridge              local
b77e108e4b77        flask_default         bridge              local
f9c92e4ef7d3        host                  host                local
ea7bb9cf5bda        none                  null                local
08a1358a964a        recommender_default   bridge              local
pimpwhippa@pimpwhippa-Aspire-E5-473G:~/Works/recommender/flask$ docker


db = pymysql.connect(db='mysql', user='root', passwd='database', host= 'localhost:3306')

flask_app_1  | pymysql.err.OperationalError: (2003, "Can't connect to MySQL server on 'localhost:3306' ([Errno -2] Name or service not known)")

db = pymysql.connect(db='mysql', user='root', passwd='database', host= 'flask_mysql_1')

flask_app_1  | pymysql.err.OperationalError: (1130, "172.26.0.3' is not allowed to connect to this MySQL server")


db = pymysql.connect(db='mysql', user='root', passwd='database', port=3306) 

flask_app_1  | pymysql.err.OperationalError: (2003, "Can't connect to MySQL server on 'localhost' ([Errno 99] Cannot assign requested address)")

db = pymysql.connect(db='mysql', user='root', passwd='database', host='127.0.0.1:3306') 

flask_app_1  | pymysql.err.OperationalError: (2003, "Can't connect to MySQL server on '127.0.0.1:3306' ([Errno -2] Name or service not known)")


db = pymysql.connect(db='mysql', user='root', passwd='database', host= 'mysql') 


flask_app_1  | pymysql.err.OperationalError: (2003, "Can't connect to MySQL server on 'mysql' ([Errno 111] Connection refused)")

db = pymysql.connect(host='flask_mysql_1', user='root', passwd='database', port=3306) 

flask_app_1  | pymysql.err.OperationalError: (2003, "Can't connect to MySQL server on 'flask_mysql_1' ([Errno 111] Connection refused)")

docker network list
NETWORK ID          NAME                  DRIVER              SCOPE
13ed315269fd        bridge                bridge              local
57c8cebfb855        flask_default         bridge              local
f9c92e4ef7d3        host                  host                local
ea7bb9cf5bda        none                  null                local
08a1358a964a        recommender_default   bridge              local

pimpwhippa@pimpwhippa-Aspire-E5-473G:~/Works/recommender/flask$ docker network inspect 57c8cebfb855

"ConfigOnly": false,
        "Containers": {
            "52d8d9d3ffab1c3b38a3c1e121f22aa6933c27ab042844ec329f100df23e6fe4": {
                "Name": "flask_mysql_1",
                "EndpointID": "5c5b40067f63494d60f5218e5d67bb2d72b5dbef5428ef3d02d3b9d425c5256b",
                "MacAddress": "02:42:c0:a8:10:02",
                "IPv4Address": "192.168.16.2/20",
                "IPv6Address": ""

                

"IPv4Address": "192.168.16.2/20",

                    "Gateway": "172.25.0.1",

flask_app_1  | pymysql.err.OperationalError: (2003, "Can't connect to MySQL server on '0.0.0.0:3306' ([Errno 2] No such file or directory)")

flask_app_1  | pymysql.err.OperationalError: (2003, "Can't connect to MySQL server on '127.0.0.1:3306' ([Errno 2] No such file or directory)")


ทั้งสอง service ดาต้าเบส และ แอพ อยู่บนเน็ตเวิร์คเดียวกัน ที่ชื่อ flask_default
Creating network "flask_default" with the default driver

แต่ MySQL server มันอยู่่ที่ไหน
"Can't connect to MySQL server on ที่ไหนก็ไม่ได้ทั้งงนั้นแหละ

ถ้าตามใน docker-compose.yml
mysql:
	environment:
		MySQL_HOST MYSQL_HOST: localhost 
flask_app:
	environment:
		TJ_MYSQL_HOST: mysql 

ฉะนั้น จะบอก flask_app ให้ไปหาดาต้าเบสที่ไหน ก็ต้องที่ localhost สิวะ

flask_app_1  |     db = pymysql.connect(db= 'mysql', host='192.168.32.1', user='root', passwd='database') 
flask_app_1  | pymysql.err.OperationalError: (2013, 'Lost connection to MySQL server during query')


flask_app_1  |     db = pymysql.connect(db= 'mysql', host='localhost', user='root', passwd='database', port=3306) 
flask_app_1  | pymysql.err.OperationalError: (2003, "Can't connect to MySQL server on 'localhost' ([Errno 99] Cannot assign requested address)")


แม่งเอา container_ID

mysql> SHOW VARIABLES WHERE Variable_name = 'hostname';
+---------------+--------------+
| Variable_name | Value        |
+---------------+--------------+
| hostname      | f2924b8102e9 |
+---------------+--------------+

flask_app_1  |     db = pymysql.connect(db= 'mysql', host='f2924b8102e9', user='root', passwd='database', port=3306) 

เสร็จแล้วตอบมาเป็น Gateway

flask_app_1  | pymysql.err.OperationalError: (1130, "192.168.32.3' is not allowed to connect to this MySQL server")

ก็ใช่น่ะสิ เพราะมีแต่ localhost เท่านั้นที่เข้าได้ แล้วใครจะไป grant permission ให้พี่ทุกครั้งที่สร้าง container ใหม่

how to let mysql grant permission to user on host connecting from the same network

เอาไงต่อ จะลองไป sqlalchemy เลยไหม หรือจะดื้อหาวิธีต่อด้วย pymysql ให้ได้ นี่มันก็จวนแล้วนะ

ถ้า sqlalachemy แม่งสั่ง create table เลย แล้วค่อยเข้าไป ยังไม่เจอแบบที่ dump มา

เราจะสั่งให้มันต่อที่ host = ‘flask_mysql_1’ ถ้าต่อได้แต่บอกว่า Gateway IP เข้าไม่ได้ ก็ต้องไป grant permission ให้ทุก user@flask_mysql_1 เข้าได้

ปรากฏว่ากลับมาได้ connectionRefused อีกแล้ว

flask_app_1  | pymysql.err.OperationalError: (2003, "Can't connect to MySQL server on 'flask_mysql_1' ([Errno 111] Connection refused)")


docker-compose mysql server who is allowed to connect
why docker-entrypoiont initdb doesn't initiate sql dump

https://github.com/docker-library/mariadb/issues/62
import dump.sql does the table comes in automatically docker

why changes in app.py is not reflected when docker-compose run
flask update code app.py volumes
python mysql binding
tell flask to wait until mysql is ready for connections
flask_app_1  | pymysql.err.OperationalError: (2003, "Can't connect to MySQL server on 'mysql' ([Errno 111] Connection refused)")

flask_app_1  | ConnectionRefusedError: [Errno 111] Connection refused

flask_app_1  | pymysql.err.OperationalError: (2003, "Can't connect to MySQL server on 'localhost' ([Errno 99] Cannot assign requested address)")

localhost vs 127.0.0.1
bind address vs socket TCP/IP
connectivity mysql web service docker
172.25.x.x
mysql unix socket vs tcp/ip
networking docker
OSI layer
pymysql.connect()

can connect but now RuntimeError
flask_app_1  | RuntimeError: 'cryptography' package is required for sha256_password or caching_sha2_password auth methods.

สรุปว่า ต่อเข้าจาก flask ไปใน mysql ได้แล้ว คือคอนเนค แต่ว่ายังใส่พาสเวิร์ดไม่ได้
จากเดิมที่ต่อไม่เข้าสักที เพราะหา hostname ไม่เจอ คือใส่เลขอะไรไปก็ไม่ได้ 172.25.0.1: 3306 อะไรเนี่ย localhost ก็ไม่ได้ สรุปที่ได้คือ ชื่อ container, container_ID แต่พอ resolve ออกมาเป็น IP address 192.168.16.2 แล้วmysql ก็ยังไม่ให้เข้าเพราะว่าไม่มี privilege ก็เลยต้องเข้าไปใน mysql แล้วสั่ง grant privileges to user ‘pimp’@% ไอ้เครื่องหมายเปอร์เซ็นนี่คือจะบอกว่า เข้ามาจาก IP ไหนก็ได้ ก็สรุปว่าอนุญาตให้เข้าได้แต่เข้าไปแล้วพาสเวิร์ดผิดอยู่ดี
บางทีก็เข้าไม่ได้ ถ้า connection refused แปลว่า mysql ยังเตรียมตัวไม่เสร็จ ไม่พร้อมสำหรับ connection ก็เลยไปสั่งใน docker-compose บอกให้ flask restart on-failure คือลองไปเรื่อยๆจนกว่าจะไม่เกิด error ซึ่งการให้ restart on-failure นี่ง่ายกว่าการไปเขียนสคริปท์บอกให้ flask รอเป็นไหนๆ การแก้ปัญหานี้ก็กว่าจะเข้าใจก็นานเหมือนกัน
คือมีปัญหาหลายอย่างที่ทำให้ต่อไม่ได้ ไม่รู้จัก hostname อะไรอย่างนั้นอีก ก็ใช้เวลางมพอสมควร

ทีนี้มาติดพาสเวิร์ดอีก แต่คิดว่า ไม่เอาแล้ว ลองย้ายไป sqlalchemy ดีกว่า ดูเหมือนจะออกแบบมาให้ใช้งาน database ง่ายกว่าเพราะเป็นคน create table เองแล้วก็เขียน class ในการเอามันมาใช้เองน่าจะคล่องตัวกว่า

051120
เข้า flask ได้แล้ว แต่เนื่องจากต่อมั่วๆ ไม่รู้ใครเป็น host ใคร ก็เลยใช้ https://localhost:5000/ ไม่ได้ ต้องเข้าที่ http://0.0.0.0:5000/ คือใครก็เข้าได้

แล้ว http://0.0.0.0:5000/mysql ก็ขึ้นในทีสุด แต่ error ว่า ไม่มี table mysql.shows3 ทำไมถึงไปเรียก mysql.shows3 อ่อ เพราะใน app.py เขียนว่างั้น

